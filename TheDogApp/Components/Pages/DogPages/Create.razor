@page "/dogs/create"
@using Microsoft.EntityFrameworkCore
@using TheDogApp
@inject IDbContextFactory<TheDogApp.Data.TheDogAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Dog</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Dog" OnValidSubmit="AddDog" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Dog.Name" class="form-control" /> 
                <ValidationMessage For="() => Dog.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="breed" class="form-label">Breed:</label> 
                <InputText id="breed" @bind-Value="Dog.Breed" class="form-control" /> 
                <ValidationMessage For="() => Dog.Breed" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="birthdate" class="form-label">Birthdate:</label> 
                <InputDate id="birthdate" @bind-Value="Dog.Birthdate" class="form-control" /> 
                <ValidationMessage For="() => Dog.Birthdate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Dog.Description" class="form-control" /> 
                <ValidationMessage For="() => Dog.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="cost" class="form-label">Cost:</label> 
                <InputNumber id="cost" @bind-Value="Dog.Cost" class="form-control" /> 
                <ValidationMessage For="() => Dog.Cost" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="shelterid" class="form-label">ShelterID:</label> 
                <InputNumber id="shelterid" @bind-Value="Dog.ShelterID" class="form-control" /> 
                <ValidationMessage For="() => Dog.ShelterID" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="imageid" class="form-label">ImageID:</label> 
                <InputNumber id="imageid" @bind-Value="Dog.ImageID" class="form-control" /> 
                <ValidationMessage For="() => Dog.ImageID" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateadded" class="form-label">DateAdded:</label> 
                <InputDate id="dateadded" @bind-Value="Dog.DateAdded" class="form-control" /> 
                <ValidationMessage For="() => Dog.DateAdded" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="sex" class="form-label">Sex:</label> 
                <InputText id="sex" @bind-Value="Dog.Sex" class="form-control" /> 
                <ValidationMessage For="() => Dog.Sex" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/dogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Dog Dog { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddDog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Dog.Add(Dog);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/dogs");
    }
}
