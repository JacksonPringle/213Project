@page "/viewEvents"
@namespace TheDogApp
@using TheDogApp
@rendermode InteractiveServer
@inject EventService EventService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject SiteUserService SiteUserService




<PageTitle>Events</PageTitle>

<div style="background-color: #EEEBE8;margin: 15px;line-height: 1.8">
    @foreach (var e in events)
    {
        <a href="/viewEvent/@e.EventId" style="text-decoration: none">
            <div class="card bg-success mb-3" style="color: #FFC82E; max-width: 450px;">
                <div class="card-header">@e.Name</div>
                <div class="card-body">
                    <h5 class="card-title">@e.Name</h5>
                    <p class="card-text">@e.StartTime - @e.EndTime</p>
                </div>
            </div>
        </a>
    }
</div>


@code {
    private List<Event> events = new();

    protected override async Task OnInitializedAsync()
    {
        events = EventService.GetEventList();
    }

    private void ViewEventDetails(int EventId)
    {
        Navigation.NavigateTo($"/viewEvent/{EventId}");
    }
    private bool? isAdmin;
    private string tempUsername = "";
    private string WarningMessage = "None";

    private bool _hasCheckedAdmin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasCheckedAdmin)
        {
            _hasCheckedAdmin = true;
            await CheckIfAdmin();
        }
    }

    private async Task CheckIfAdmin()
    {
        try
        {
            string value = await JSRuntime.InvokeAsync<string>("localStorageHelper.getItem", "loggedID");

            if (int.TryParse(value, out int id))
            {
                var users = SiteUserService.GetSiteUserList();
                var user = users.FirstOrDefault(u => u.Id == id);

                if (user != null)
                {
                    isAdmin = user.IsAdmin;
                }
                else
                {
                    isAdmin = null;
                }
            }
            else
            {
                isAdmin = null;
            }

            StateHasChanged();  // Trigger UI updates
        }
        catch (Exception ex)
        {
            WarningMessage = $"JS Interop Error: {ex.Message}";
        }
    }

 
}

<script>
    window.getInputValue = (element) => {
        return element.value;
    };
</script>

<script>
    window.localStorageHelper = {
        getItem: (key) => {
            return localStorage.getItem(key);
        }
    };
</script>
