@page "/upload"
@inject IJSRuntime JSRuntime
@inject DogService DogService

@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

@inject NavigationManager Navigation

@inject IDbContextFactory<TheDogApp.Data.TheDogAppContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment


<PageTitle>Favorite Color TEST PAGE</PageTitle>

<form>
    <label for="name">Name:</label>
    <input id="name" @ref="NameInput" />
    <br />

    <label for="breed">Breed:</label>
    <input id="breed" @ref="BreedInput" />
    <br />

    <label for="birthdate">Birthdate:</label>
    <input id="birthdate" @ref="BirthdateInput" type="date" />
    <br />

    <label for="description">Description/key info:</label>
    <input id="description" @ref="DescInput" />
    <br />

    <label for="cost">Cost to Adopt:</label>
    <input id="cost" @ref="CostInput" type="number" step ="0.01" min="0"/>
    <br />

    <label for="shelterId">Shelter ID:</label>
    <input id="shelterId" @ref="ShelterIdInput" type="number" step="1" min="0" />
    <br />
    
    <label for="dateAdded">Date Added to Shelter:</label>
    <input id="dateAdded" @ref="DateAddedInput" type="date" />
    <br />

    <label for="sex">Sex:</label>
    <input id="sex" @ref="SexInput" />
    <br />

    <label for="photo">Upload Photo:</label>
    <InputFile OnChange="HandleFileSelected" />
    <br />


    <button type="button" @onclick="ReadInputValue">Submit</button>

</form>

<p>Dog Name: @DogName</p>
<p>Dog Breed: @DogBreed</p>
<p>Birthdate: @Birthdate</p>
<p>Brief Description: @DogDescription</p>
<p>Cost to Adopt: @DogCost</p>
<p>Shelter ID: @ShelterID</p>
<p>Date Added: @DateAdded</p>
<p>Sex: @Sex</p>

<p>Uploaded Photo: @UploadedPhotoPath</p>
@if (!string.IsNullOrEmpty(UploadedPhotoPath))
{
    <img src="@UploadedPhotoPath" alt="Uploaded Photo" style="max-width: 200px; height: auto;" />
}

@code {
    private ElementReference NameInput;
    private ElementReference BreedInput;
    private ElementReference BirthdateInput;
    private ElementReference DescInput;
    private ElementReference CostInput;
    private ElementReference ShelterIdInput;
    private ElementReference DateAddedInput;
    private ElementReference SexInput;


    private string DogName { get; set; } = "";
    private string DogBreed { get; set; } = "";
    private DateTime Birthdate { get; set; }
    private string DogDescription { get; set; } = "";
    private decimal DogCost { get; set; }
    private int ShelterID { get; set; }
    private DateTime DateAdded { get; set; }
    private string Sex { get; set; } = "";

    private string UploadedPhotoPath { get; set; } = "";

    private IBrowserFile UploadedFile;

    private async Task ReadInputValue()
    {
        DogName = await JSRuntime.InvokeAsync<string>("getInputValue", NameInput);
        DogBreed = await JSRuntime.InvokeAsync<string>("getInputValue", BreedInput);

        var dateString = await JSRuntime.InvokeAsync<string>("getInputValue", BirthdateInput);
        Birthdate = DateTime.TryParse(dateString, out var date) ? date : DateTime.MinValue;

        DogDescription = await JSRuntime.InvokeAsync<string>("getInputValue", DescInput);

        var numberString = await JSRuntime.InvokeAsync<string>("getInputValue", CostInput);
        DogCost = decimal.TryParse(numberString, out var number) ? number : 0;

        var numberString2 = await JSRuntime.InvokeAsync<string>("getInputValue", ShelterIdInput);
        ShelterID = int.TryParse(numberString2, out var number2) ? number2 : 0;

        var dateString2 = await JSRuntime.InvokeAsync<string>("getInputValue", DateAddedInput);
        DateAdded = DateTime.TryParse(dateString2, out var date2) ? date2 : DateTime.MinValue;

        Sex = await JSRuntime.InvokeAsync<string>("getInputValue", SexInput);

        Dog dog = new Dog();
        dog.Name = DogName;
        dog.Breed = DogBreed;
        dog.Birthdate = Birthdate;
        dog.Description = DogDescription;
        dog.Cost = DogCost;
        dog.ShelterID = ShelterID;
        dog.DateAdded = DateAdded;
        dog.Sex = Sex;
        dog.ImagePath = UploadedPhotoPath;

        using var context = DbFactory.CreateDbContext();
        context.Dog.Add(dog);
        await context.SaveChangesAsync();
        
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;

        // Ensure wwwroot/images folder exists
        var imageFolderPath = Path.Combine(WebHostEnvironment.WebRootPath, "images");
        if (!Directory.Exists(imageFolderPath))
        {
            Directory.CreateDirectory(imageFolderPath);
        }

        // Define file path
        var fileName = $"{Guid.NewGuid()}_{UploadedFile.Name}";
        var filePath = Path.Combine(imageFolderPath, fileName);

        // Save file
        await using var stream = new FileStream(filePath, FileMode.Create);
        await UploadedFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(stream); // Limit to 5MB

        // Set the path to display the image
        UploadedPhotoPath = $"/images/{fileName}";


    }
}

<script>
    window.getInputValue = (element) => {
        return element.value;
    };
</script>

